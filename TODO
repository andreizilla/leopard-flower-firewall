add "started rsyslog" to init. check-out the syntaxis and whether with rsyslog switched off lpfw gonna start anyway

18 Jun 11
Before implementing further features, the IPC should be polished.
[IMPLEMENTED] 1st: message should not be a string but a struct;

20 Jun 11
[SOLVED] cli on pressing "d" misbehaves.

21 Jun 11
investigate lpfw crash with claw-mails checking mail, creating deleting threads (28 Jun: shelving this bug atm - unable ro reproduce due to lack of connection.
 Alternately, I could set up a local POP server, but can't be bothered atm)

[PENDING] Next step must be assert()s everywhere in the code.

28 Jun 11
[SOLVED] Investigate such a long wait time (5 sec +) when adding new rules to frontend. [Done! sha512 is the culprit.]
[SOLVED] GDB itself crashes, trace ruleswrite function;

29 Jun 11
IDEA: lpfw should ask frontend, then remember what was asked and expect only a 1 byte response from frontend.
[SOLVED] FOUND BUG IN NETBEANS: to reproduce - set a breakpoint, then comment the code where BP is set. Upon recomplation, netbeans still steps through the commented code. [Can
t reproduce this bug]

01 Jul 11
[SOLVED] rules load perms[0] suddenly becomes == 0 ? (Reason: fgets overflow)

02 Jul 11
[DONE]Next to do: implement Fried's commlline parser.
[DISMISSED ]Maybe add a feature to frontend: List of all rules (both active and inactive with the ability to delete/change permissions);
Maybe try to cook up a PyQt frontend?
Add new column Process name.

07 Jul 11
How to put the whole swarm of argtable's *.c files in a Makefile? (to compile-in argtable?)

---------BEGIN UNFEASIBLE PROPOSAL------------
Security-harden the daemon.
lpfw should create group lpfwuser or if it already exists, make sure it has no users in it.
lpfw should setgid to lpfwuser;
cli registers with lpfw and lpfw checks exe's sha;***
then lpfw  set_cap_pid on cli to CAP_SETGID ^^^
cli should also (by means on newly acquired capability) setgid to lpfwuser.
Cli reports back to lpfw and the latter drops capsetgid privs.
Then lpfw creates message queues with read/write permissions only for lpfwuser group's members.
Voila!

*** To rule out spoofing at this stage, some extra checks should be carried out, e.g.
Create message queue size 1 byte which allows only 1 message
Compare time of last msgsnd and msgrcv - shouldn't be more than a second apart(this is a redundant check)

^^^ There is a spoofing possibility here too. If a malicious app kills cli and starts with it's PID.
It then receives CAPSETGID and setgid lpfwuser and can write to msgq

The sha check can take lots of time if attacker loads CPU. By the time check is finished, malicious app
may already be running with cli's former PID. So, before sha, stime should be remebered
and then before set_cap stime should be looked up again and compared.

------------END UNFEASIBLE PROPOSAL-------------

08 Jul 11
The above security mechanism is not gonna work because standard kernels disable capsetp() function which allows to set
 capabilities of another process. Besides even if this function was still enabled, the calling process should have CAP_SETPCAP
capability itself. But standard kernels don't allow even root processes to have this capability.
It seems like the only way to implement any decent security solution would be to launch frontend as a daemon's child.
Which brings me back two months ago when I researched this fork()ing matter and found it too complicated to use.

09 Jul 11
Workflow for implementing sec.hard. when launching frontend from within X (not from tty):

the frontend is launched by issuing lpfw --cli (hereafter referred to as newlpfw, as opposed to oldlpfw -
the daemon instance that is already running)
newlpfw sends tty and DISPLAY and uid on which this command was issued to oldlpfw via sysvmsg
it tty is /dev/tty, we can't proceed :) only works with /dev/pts/*
oldlpfw checks that newlpfw is really an instance of its (i.e. checks its shasum)
it then fork-execs, setuid(user)  "xterm -e lpfwcli", registers its PID and does waitpid().

oldlpfw also setgid on its child to lpfwuser!
This way there is no need to poll
every 5 secs if frontend is still running.

The obsolete lpfwcli registering method (by launching lpfwcli directly) is only gonna work from tty from now on - implement this check.
This method is very insecure, because any malicious app with user's credentials can fake messages in sysvmsgq.
The way to counter that would be to check each message's PID an compare it to registered lpfwcli's PID, thus ensuring only messages
 from lpfwcli are authorised. But this would increase the complexity of maintaining the code. And since lpfw is geared towards X.org
 users, unless such a request is made and/or appropriate patches proposed, launching lpfwcli from tty will remain an unsafe thing.

[NETBEANS] is there no word wrap function in NB's editor?
[SECURITY] Research if the attacker could create a race condition by exhausting the system-wide byte limit of message queues and thus
                      manipulating our msgq threads by making them wait for the next packet for however long the attacker wants.

Jul 12 2011
Test that non-lpfwuser-group app really can't read/write the msgq. (Answer: they really can't)

Jul 13 2011
I made an important decision not to add any new features to ncurses frontend. I had a feeling that ncurses are poorly docum ented and rather buggy. What I'm gonna do is make a decent Qt frontend and then port it to Qt Embedded. Qt Embedded is just as much a pure console and ncurses, only I'm afraid QTEmb can't be run with "screen", it apparently captures the whole display. Really, though, I had this uneasy feeling at the thought of delving into ncurses. It may take days figuring out why a function doesnt behave in an expected way.

[NETBEANS] Another stupidity a came across is that you refactor/rename and give a name that already exists, you don't get warned but stuff gets renamed and you end up with two different types with the same name, without an option to roll back. I had manually rename everything.
	
when loading rules, thers is nodlist_add need to get starttime :)

Jul 14 2011
Worthwhile tests can be written:
1. Send icmp package, send 2 packages
2. Generate Tcp packet and check if PID and path are determined correctly
3. Generate Udp packet -||-

F2DCOMM_ADD should not read from msgq, it should remember what it has sent and simply read a 1-byte response

Jul 15 2011
be crashes when fe from last session is still running. Apparently child process retains some nfqueue
descriptors of parent. be should call nfq_close or something on exit?

Architecture flaw: even when a rule is deleted, if it has an open connection, the connection continues. Deleting rule just stops from starting new connections.

Jul 21 2011
6 days worth of precious notes lost due to freaking stupid eclipse file linking that confuses me

[ECLIPSE] when ctrl+tabbing, all windows lose focus. Report as bug

TODO msg_d2flist type suddenly becomes -3323232323 something
TODO in /proc scanning change closedir to rewinddir

4 Aug 2011 Thu
[NETBEANS BUG] With linewrap active, caret is on the left to a letter instead of on the right. That happens on those lines for which linewrapping has been done.

10 Aug 2011
[NB BUG] on debug, on mouse over, values don't popup anymore
(update: fixed by upgrading to v. 7.0.1)

17 Aug 2011
[NB 7.0.1 BUG] When debugging, after steppin through system() call, debugger doesn't return even though prog's execution continues.
With NB upgrade, gdb acts very strangely, skipping breakpoints. My enthusiasm is getting dampened after fighting IDE for many days now instead of being productive. I'm stuck between netbeans and eclipse.

Aug 18
Reverted to NB 6.9.1, deleted ~/.netbeans and debugging is working OK

Ideas on how to reduce CPU load when shasumming large files like sr ware iron:
- remember paths of bulky exes and start gradually shasumming them upon lpfw start-up.
    Implement this as an option - to check sums upon startup + inotify
Actually start-up checking is not essential, yet inotify is. It is Ok to wait 5-10 secs for iron upon reboot. If it is going to be only once
- after summing once per session, use inotify to make sure exe doesnt change, so no need to sum again
- research if exe's modify/create date can be arbitrarily changed?

1 Sep 2011
At long last i found an IDE that does all I ever wanted: KDevelop.

[KDEV] Esc can't be reassigned to a different action - it stops jobs now
INOTIFY: a separate thread should monitor exeptionally big executables
      
09 Sep 2011
Even though it is possible to set nfmark on a packet when issuing a verdict, there is no way to transfer this mark to conntrack's connection mark. Thus the only way to mark a connection associated with a packet is to take packet's source port and then 
conntrack -U -p tcp --sport MYPORT -m MYNFMARK
Then later when a rule is deleted or changed to DENY* we can
conntrack -D -m MYNFMARK
(Alternatively, use libnetfilter_conntrack API which is rather complex to wrap my head around ATM);


Check out inclusion to GNU conditionss