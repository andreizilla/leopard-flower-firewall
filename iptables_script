#!/bin/bash +x

  # first author: marcos de vera
  # second: joan marc riera

  ip=/sbin/iptables
  admins=""
  adminServices="5900 22 8080" # vnc, ssh, vlc remote
  tcpservices="" # qbtorrent
  udpservices=""

  # Firewall script for servername

  echo -n ">> Applying iptables rules... "

  ## flushing...
  $ip -F
  $ip -X
  $ip -Z
  $ip -t nat -F

  # default: DROP!

# NOTE: THE FOLLOWING OUTPUT-ACCEPT RULES IS JUST TO MAKE BITTORRENT WORK
  $ip -P INPUT DROP
  $ip -P OUTPUT DROP
  $ip -P FORWARD DROP

iptables -A INPUT  -m conntrack --ctstate ESTABLISHED -j ACCEPT
iptables -A OUTPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT

exit

# ---------------- NOTE ------------------
# The iptables rules bellow are not used. I kept the rules in this file as a reference
# for what can be done with this script.
# To work with leopard-flower-firewall, only the above is needed. You may also change the
# above to just say ACCEPT instead of DROP and then remove the two ACCEPT lines.
# Either way everything will get filtered by leopard flower firewall anyway.


iptables -A OUTPUT -m conntrack --ctstate INVALID -j REJECT
exit
#iptables -A INPUT -m conntrack --ctstate ESTABLISHED -j ACCEPT
#iptables -A INPUT -m state --state INVALID -j REJECT
# --- the above should be enough for bit torrent ---
#iptables -A INPUT -p udp -m multiport --dports 6881:6999 -m state --state NEW -j ACCEPT 
#iptables -A INPUT -p tcp -m multiport --dports 25,6881:6999 -m state --state NEW -j ACCEPT 
#iptables -A INPUT -p icmp -j ACCEPT

#iptables -A OUTPUT -j REJECT

exit

  # filtering...

  # localhost: free pass!
  $ip -A INPUT -i lo -j ACCEPT
  $ip -A OUTPUT -o lo -j ACCEPT

  # administration ips: allow certain services to the admins
  for admin in $admins ; do
     for service in $adminServices ; do
       $ip -A INPUT -s $admin -p tcp -m tcp --dport $service -j ACCEPT
       $ip -A OUTPUT -d $admin -p tcp -m tcp --sport $service -j ACCEPT
     done
  done


  # allowed services
  for service in $tcpservices ; do
      $ip -A INPUT -p tcp -m tcp --dport $service -j ACCEPT
      $ip -A OUTPUT -p tcp -m tcp --sport $service -m state --state RELATED,ESTABLISHED -j ACCEPT
  done
  for service in $udpservices ; do
      $ip -A INPUT -p udp -m udp --dport $service -j ACCEPT
      $ip -A OUTPUT -p udp -m udp --sport $service -m state --state RELATED,ESTABLISHED -j ACCEPT
  done

  #$ip -A INPUT -j LOG --log-level 4

  # allow the machine to browse the internet
  $ip -A INPUT -p tcp -m tcp --sport 80 -m state --state RELATED,ESTABLISHED -j ACCEPT
  $ip -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
  $ip -A INPUT -p tcp -m tcp --sport 443 -m state --state RELATED,ESTABLISHED -j ACCEPT
  $ip -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT

  $ip -A INPUT -p tcp -m tcp --sport 8080 -m state --state RELATED,ESTABLISHED -j ACCEPT
  $ip -A OUTPUT -p tcp -m tcp --dport 8080 -j ACCEPT

  $ip -A INPUT -p tcp -m tcp --sport 22 -m state --state RELATED,ESTABLISHED -j ACCEPT
  $ip -A OUTPUT -p tcp -m tcp --dport 22 -j ACCEPT

  # don't forget the dns...
  $ip -A INPUT -p udp -m udp --sport 53 -j ACCEPT
  $ip -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
  $ip -A INPUT -p tcp -m tcp --sport 53 -j ACCEPT
  $ip -A OUTPUT -p tcp -m tcp --dport 53 -j ACCEPT


#iptables -N LOGGING
#iptables -A INPUT -j LOGGING
#iptables -A OUTPUT -j LOGGING
#iptables -A LOGGING -j LOG --log-prefix "IPTables-Dropped: " --log-level 4
#iptables -A LOGGING -j DROP


  echo "OK. Check rules with iptables -L -n"

  # end :)
